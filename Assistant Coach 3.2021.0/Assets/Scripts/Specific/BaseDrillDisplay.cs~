using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class BaseDrillDisplay : MonoBehaviour {


	//Components

	[SerializeField] private Image 	diagram = null;
	[SerializeField] private GameObject	description = null;
	[SerializeField] private GameObject	SubLayoutController = null;
	[SerializeField] private Slider	textSlider;

	[SerializeField] private Text 	block = null;
	[SerializeField] private Text 	topic = null;
	[SerializeField] private Text 	time = null;


	private Text	text = null;
	private Image	image = null;
	private ContentSizeFitter contentSizeFitter;
	private Canvas parentCanvas;
	private ApplicationController app;

	//Fields

	protected CurriculumItem curriculum = new CurriculumItem();
	private int fontSize = ROOT_FONT_SIZE;
	private BlockStruct.Description_Type type = BlockStruct.Description_Type.text;



	//Constants
	private const int ROOT_FONT_SIZE = 45;
	private const int MIN_FONT_SIZE = 30;



	//Properties

	private bool portrait = false;
	public bool Portrait
	{ 
		get{ return portrait; }
		private set{ portrait = value; }
	}



	//Methods

	#region InGameMethods

	void OnEnable ()
	{
		if (type == BlockStruct.Description_Type.graphic)
			image = description.GetComponent<Image>();
		else 	text = description.GetComponent<Text> ();

		if (textSlider == null)
			textSlider = GetComponentInChildren<Slider> ();

		textSlider.value = ROOT_FONT_SIZE;

		app = FindObjectOfType<ApplicationController> ();
		parentCanvas = GetComponentInParent<Canvas> ();
	}

	int c = 21;
	int t = 20;
	void Update ()
	{
		c++;

		if (c > t)
		{
			if (app.currentCanvas != parentCanvas)
			{
				t = 50;
			}
			else
			{
				ResizeAllElementsForBestFit ();
				t = 20;
			}

			c = 0;
		}
	}


	public void SetCurriculum (CurriculumItem item)
	{
		curriculum = item;
	}


	public void ShowDrillBaseRootIndex (BlockStruct _block, int index, int _time, eTopics eTopic)
	{
		ToggleDrillType (_block.descriptionType);

		diagram.sprite	= _block.mySprite;
		time.text 		= _time + "min";
		block.text 		= "Block " + (index + 1);
		topic.text 		= eTopic.ToDisplay ();


		ResizeImageToMaxSize (diagram);

		if (_block.descriptionType == BlockStruct.Description_Type.graphic)
		{
			image.sprite = _block.descriptionGraphic; 
			ResizeImageToMaxSize (image);
		}
		else
		{
			text.text = _block.descriptionText.Trim () + "\n";
			text.fontSize = fontSize;
		}
	}


	#endregion





	private const int SPACING = 2;


	public void ToggleLayoutType ()
	{
		StopAllCoroutines ();
		StartCoroutine (pToggleLayoutType ());
	}


	private IEnumerator pToggleLayoutType ()
	{
		//Portrait(stacked) => Horizontal (side-by-side)
		if (Portrait)
		{
			Portrait = !Portrait;
			var prev = SubLayoutController.GetComponent<VerticalLayoutGroup> ();
			if (prev != null) Destroy (prev);

			yield return new WaitForEndOfFrame ();

			var nLayout = SubLayoutController.AddComponent<HorizontalLayoutGroup> ();

			nLayout.spacing = SPACING;
			nLayout.padding.left = SPACING;
			nLayout.padding.right = SPACING;

			nLayout.childControlHeight = false;

			if (type == BlockStruct.Description_Type.text)
				text.fontSize = fontSize;
		}
		else
		{
			Portrait = !Portrait;

			var prev = SubLayoutController.GetComponent<HorizontalLayoutGroup> ();
			if (prev != null) Destroy (prev);

			yield return new WaitForEndOfFrame ();

			var nLayout = SubLayoutController.AddComponent<VerticalLayoutGroup> ();

			nLayout.spacing = SPACING;
			nLayout.padding.top = SPACING;
			nLayout.padding.bottom = SPACING;

			nLayout.childControlHeight = false;

		}


		ResizeAllElementsForBestFit ();
		SubLayoutController.GetComponent<HorizontalOrVerticalLayoutGroup>().SetLayoutVertical ();
		this.GetComponent<HorizontalOrVerticalLayoutGroup>().CalculateLayoutInputVertical ();
		this.GetComponent<HorizontalOrVerticalLayoutGroup>().SetLayoutVertical ();


		yield return null;
	}



	private void ToggleDrillType (BlockStruct.Description_Type _type)
	{
		if (_type == type) return;

		if (_type == BlockStruct.Description_Type.graphic)
		{
			DestroyImmediate (description.GetComponent<Text>());
			image = description.AddComponent<Image>();
			description.GetComponent<ChildContentFitter> ().verticalFit = ContentSizeFitter.FitMode.Unconstrained;
		}
		else 
		{
			DestroyImmediate (description.GetComponent<Image>());
			text = description.AddComponent<Text>();
			description.GetComponent<ChildContentFitter> ().verticalFit = ContentSizeFitter.FitMode.PreferredSize;

			text.color = Color.black;
			text.font = FindObjectOfType<ApplicationController> ().descriptionFont;
			text.fontSize = fontSize;

		}

		type = _type;
	}



	public void ResizeAllElementsForBestFit ()
	{
		ResizeImageToMaxSize (diagram);

		var descriptImage = description.GetComponent<Image> ();

		if (descriptImage != null)
			ResizeImageToMaxSize (descriptImage);
	}



	private void ResizeImageToMaxSize (Image _image)
	{
		if (_image.sprite == null || _image.sprite.texture == null) return;
		_image.preserveAspect = true;

		Canvas.ForceUpdateCanvases ();

		RectTransform rt = _image.GetComponent<RectTransform> ();

		float width = rt.rect.size.x;
		float newHeight =  width * (float)_image.sprite.texture.height / (float)_image.sprite.texture.width;

		Vector2 nV2 = new Vector2 (0, newHeight);

		if (nV2 != rt.sizeDelta)
			rt.sizeDelta = new Vector2 (0, newHeight);
	}




	public void ToggleObjectActive (GameObject obj)
	{
		bool active = obj.activeSelf == false;
		obj.SetActive (active);
	}



	public void ChangeTextSize ()
	{
		fontSize = (int)textSlider.value;
		if (type == BlockStruct.Description_Type.text)
		{
			if (!Portrait)
				text.fontSize = fontSize;
		}
	}

}
